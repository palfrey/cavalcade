---
on:
    push:
        branches:
            - main
    pull_request:
    schedule:
        - cron: 0 0 1 * *

name: Continuous integration

jobs:
    test:
        services:
            postgres:
                image: postgres:13
                env:
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: cavalcade
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        name: Test suite
        runs-on: ubuntu-latest
        env:
            DATABASE_URL: postgres://postgres:password@localhost/cavalcade
        steps:
            - uses: actions/checkout@v2.3.4
            - uses: actions-rs/toolchain@v1.0.7
              with:
                  profile: minimal
                  toolchain: stable
                  override: true
                  components: clippy, rustfmt
            - uses: Swatinem/rust-cache@v1
              with:
                  cache-on-failure: true
            - name: Install sqlx-cli
              run: cargo install sqlx-cli --no-default-features --features postgres,rustls
            - name: Run migrations
              run: sqlx migrate run
            - name: Check sqlx prepare
              run: cargo sqlx prepare --check -- --lib
            - name: Check formatting
              uses: actions-rs/cargo@v1.0.3
              with:
                  command: fmt
                  args: -- --check
            - name: Clippy
              uses: actions-rs/cargo@v1.0.3
              env:
                  RUSTFLAGS: -Dwarnings
              with:
                  command: clippy
            - name: Build and test
              uses: actions-rs/cargo@v1.0.3
              with:
                  command: test

    postgres-integration-test:
        name: Postgres Integration Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.3.4
            - uses: satackey/action-docker-layer-caching@v0.0.11
              continue-on-error: true
            - name: Run test-celery
              run: |-
                  set -euo pipefail
                  docker-compose up --build --exit-code test-celery | tee -i all.log
                  grep "exited with code 0" all.log
                  if grep panic all.log; then
                    echo Found panic
                    exit 1
                  else
                    echo No panic Found
                  fi

    crdb-integration-test:
        name: Cockroach Integration Test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.3.4
            - uses: satackey/action-docker-layer-caching@v0.0.11
              continue-on-error: true
            - name: Run test-celery
              run: |-
                  set -euo pipefail
                  docker-compose up --build --exit-code test-celery | tee -i all.log
                  grep "exited with code 0" all.log
                  if grep panic all.log; then
                    echo Found panic
                    exit 1
                  else
                    echo No panic Found
                  fi
              env:
                  COMPOSE_FILE: docker-compose.yml:docker-compose.cockroach.yml

    docker-build:
        name: Docker build test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2.3.4
            - uses: actions/cache@v2
              with:
                  path: |
                      /tmp/.buildx-cache
                  key: buildx-${{ runner.os }}-${{hashFiles('Dockerfile.release')}}
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v1
            - name: Docker build
              run: |
                  docker buildx build -f Dockerfile.release --tag cavalcade:latest --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max --output=type=docker .
            - name: Docker help test
              run: |
                  docker run --name cavalcade cavalcade --help
            - name: Docker copy
              run: |
                  docker cp cavalcade:/cavalcade cavalcade-linux-x64
            - name: ldd check
              run: |-
                  ldd cavalcade-linux-x64 | grep "statically linked"
                  retVal=$?
                  if [ $retVal -ne 0 ]; then
                    ldd cavalcade-linux-x64
                    echo Found local non-static refs!
                    exit 1
                  fi                
